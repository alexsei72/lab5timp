/*
 *Лабораторная: 5.
 *Источник: https://hwmw.blogspot.com/p/labstimp2.html
 *
 *Язык: C Sharp (C#) v7.3.
 *Среда: Microsoft Visual Studio 2019 v16.9.1.
 *Платформа: .NET Framework v4.6.1.
 *API: Windows forms.
 *Изменение: 28.05.2021.
 *Защита: 29.05.2021.
 *
 *Вариант: БН.
 *Задание: разработка .NET приложения с использованием неуправляемого кода. Разработайте win32 библиотеку с функцией возвращающей
 *   время и амплитуду сигнала в виде структуры: Time: TDateTime; Value: Double. Напишите графическое приложение .NET использующее
 *   неуправляемый код этой библиотеки для отображения на графике.
 *
 *Примечание:
 *1. DLL-библиотека написана на ЯП "Pascal".
 *2. Перевод: "{ Важное примечание об управлении памятью DLL: ShareMem должен быть первым элементом в предложении USES вашей
 *   библиотеки И предложении USES вашего проекта (выберите Project-View Source), если ваша DLL экспортирует какие-либо процедуры или
 *   функции, которые передают строки в качестве параметров или результатов функции. Это относится ко всем строкам, передаваемым в
 *   вашу DLL и из нее, даже к тем, которые вложены в записи и классы. ShareMem - это интерфейсный модуль к диспетчеру разделяемой
 *   памяти BORLNDMM.DLL, который должен быть развернут вместе с вашей DLL. Чтобы избежать использования ORLNDMM.DLL, передавайте
 *   строковую информацию с помощью параметров PChar или ShortString. }".
 *3. Подключение DLL-библиотеки: Проект -> ПКМ -> "Добавить существующий элемент".
 *   Свойства DLL-библиотеки: "Копировать в выходной каталог" -> "Всегда копировать".
 *4. "Пошаговое руководство. Создание и использование собственной библиотеки динамической компоновки (C++)":
 *   Источник: https://docs.microsoft.com/ru-ru/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-160
 *5. "ref" - тип данных. Передача по ссылке - по адресу переменной в памяти (передается сама переменная, а не ее копия).
 *6. "enum" - тип данных перечисление (набор логически связанных констант, аналог структуры). При не явной инициализации константам
 *   присваиваются значения из диапазона [0, +oo] с шагом +1 (поддерживаются только целочисленные типы: byte, int, short, long). При
 *   явной инициализации начинаться может с любого числа с любым шагом.
 *   Передача по значению (копия переменной).
 *7. "=>" - лямбда-оператор используется для отделения входных параметров с левой стороны от тела лямбда-выражения с правой стороны.
 *8. "Task" - программный блок будет выполняться асинхронно. Избавляет от написания каждый раз "Task.Run" (см. "Служба Windows").
 *9. "async" - не делает автоматически функцию асинхронным. Он лишь указывает, что данная функция может содержать одно или несколько
 *   выражений "await" (асинхронное выполнение последующего за ней оператора).
 *   Источник: https://metanit.com/sharp/tutorial/13.3.php
 *10. Отличие класса "Task" и "async" в том же источнике (см. выше).
 */

using System;
using System.Windows.Forms;

namespace UnmanagedCode
{

    static class Program
    {
        /// <summary>
        /// Главная точка входа для приложения.
        /// </summary>
        [STAThread]
        static void Main ()
        {
            Application.EnableVisualStyles ();
            Application.SetCompatibleTextRenderingDefault (false);
            Application.Run (new Form1 ());
        }
    }
}
